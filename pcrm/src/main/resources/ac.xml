<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:p="http://www.springframework.org/schema/p"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:task="http://www.springframework.org/schema/task"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">
<import resource="ac-mybatis.xml"/>
<import resource="ac-quartz.xml"/>
<aop:aspectj-autoproxy/>
<context:component-scan base-package="com.chamago.pcrm,sy.dao,sy.service" annotation-config="true"  />
 
 <!-- 定时任务处理 -->
<task:annotation-driven scheduler="myScheduler"/>
<task:scheduler id="myScheduler" pool-size="2"/>
 
<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
   <property name="locations"><list>
         <value>classpath:jdbc.properties</value>
          <value>classpath:memcache.properties</value>
		</list></property></bean>
  
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${datasource.driverClassName}"/>
        <property name="url" value="${datasource.url}"/>
        <property name="username"  value="${datasource.username}"/>
        <property name="password" value="${datasource.password}"/></bean> 
        
      <bean id="dataSource1" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${datasource.driverClassName}"/>
        <property name="url" value="${appDatasource.url}"/>
        <property name="username"  value="${appDatasource.username}"/>
        <property name="password" value="${appDatasource.password}"/></bean>     
 
  <bean id="dataSource2" class="org.springframework.jdbc.datasource.DriverManagerDataSource"  ><!-- destroy-method="close" -->
        <property name="driverClassName" value="${datasource.driverClassName}"/>
        <property name="url" value="${datasource.url}"/>
        <property name="username"  value="${datasource.username}"/>
        <property name="password" value="${datasource.password}"/>
  	     
  </bean> 




 	<!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		p:dataSource-ref="dataSource"  />
	<!-- 注解控制事务 -->
 	<tx:annotation-driven transaction-manager="transactionManager" />
 	<!-- 自动拦截 -->
 	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	      <tx:method name="delete*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception"/>
	      <tx:method name="insert*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" />
	                            
	                            
	      <tx:method name="add*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" />
	                            
	      <tx:method name="edit*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" />
	                            
          <tx:method name="bathcInsert*" propagation="REQUIRED" read-only="false"
          		rollback-for="java.lang.Exception" />
	      <tx:method name="update*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" />
          <tx:method name="batchUpdate*" propagation="REQUIRED" read-only="false"
          rollback-for="java.lang.Exception" />
	      <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	      <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
	      <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
	    </tx:attributes>
	 </tx:advice>
	   
	 <aop:config>  
	  	<!--把事务控制在Service层--> 
	    <aop:pointcut id="pc" expression="execution(public * com.chamago.pcrm.*.*.service.*.*(..))" /> 
	    <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	 </aop:config>
 	
 
<!--
<context:component-scan base-package="com.chamacrm"/>
-->


<!-- <tx:annotation-driven /> 
/usr/local/bin/memcached -d -m 2048 -u root -l cmg2.chamago.com -p 11212 -c 256 -P /tmp/memcached2.pid

 -->
 <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"   factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
    <constructor-arg><value>memcachedPool</value></constructor-arg>
    <property name="servers">
        <list><value>cmg1.chamago.com:11212</value></list></property>
	<!-- 多服务器负载均衡   <property name="weights" value="5,5"/>  -->
    <property name="initConn" value="${mc.initConn}"/>
    <property name="minConn" value="${mc.minConn}"/>
    <property name="maxConn" value="${mc.maxConn}"/>
    <property name="maintSleep" value="${mc.maintSleep}"/>
    <property name="nagle" value="${mc.nagle}"/>
    <property name="maxIdle" value="${mc.maxIdle}"/>
    <property name="socketTO" value="${mc.socketTO}"/>
</bean>



<bean  class=" com.chamago.lucene.api.LuceneUtils" scope="singleton">
	<constructor-arg index="0" value="${LUCENE.ROOT}"/></bean>
	
<bean  class="com.chamago.pcrm.common.utils.MemCachedSwitch">
	<constructor-arg index="0" value="${mc.on}"/></bean>

<bean id="mc" class="com.danga.MemCached.MemCachedClient">
 		<constructor-arg index="0"  type="java.lang.String"   value="memcachedPool" /></bean>  

 
<bean id="sqlSessionFactory"   class="org.mybatis.spring.SqlSessionFactoryBean"  >    
    	<property name="configLocation" value="classpath:mybatis-config.xml"></property>    
    	<property name="dataSource" ref="dataSource"></property></bean>   
<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
 	<constructor-arg index="0"><ref bean="sqlSessionFactory"/></constructor-arg></bean>

<bean id="sqlSessionFactory1"   class="org.mybatis.spring.SqlSessionFactoryBean"  >    
    	<property name="configLocation" value="classpath:mybatis-config1.xml"></property>    
    	<property name="dataSource" ref="dataSource1"></property></bean>   

<bean id="sessionTemplate1" class="org.mybatis.spring.SqlSessionTemplate"  >
 	<constructor-arg index="0"><ref bean="sqlSessionFactory1"/></constructor-arg></bean>
 
 <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			<prop key="hibernate.show_sql">false</prop>
			</props>
		</property>
		   <property name="mappingResources">
    <list>
     <value>sy/hbm/Syrole.hbm.xml</value>
     <value>sy/hbm/Syuser.hbm.xml</value>
     <value>sy/hbm/SyuserSyrole.hbm.xml</value>
     
     <value>sy/hbm/SyroleSyreource.hbm.xml</value>
     <value>sy/hbm/Syresource.hbm.xml</value>
    </list>
   </property>
</bean> 
 
	<bean name="transactionManager1" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager1" />
		 

		 
		 
		 
		 
		 
<!-- 用户的密码加密或解密 -->
<bean id="passwordEncoder"
class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />


<!-- spring security自带的与权限有关的数据读写Jdbc模板 -->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
<property name="dataSource" ref="dataSource2" />
</bean>
 
</beans>
 
 